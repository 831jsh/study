일단 궁금한 내용은 FAQ에 대부분 들어 있다. 간단히 번역해본다.

    Rocket은 무엇인가요?

Rocket은 Docker 런타임을 대체하기 위한 시스템으로 가장 까다로운 보안과 프로덕션 수준의 요구사항이 필요한 서버 환경에 맞추어 디자인 되었습니다. Rocket은 앱 컨테이너(App Container) 스펙에 맞추어져 있는데, 앱 컨테이너는 이식 가능한(portable) 컨테이너 포맷을 위한 간단하고 오픈된 스펙들의 새로운 집합입니다.

    Rocket은 언제 사용해볼 수 있나요?

Rocket은 GitHub를 통해 오늘(2014-12-01) 만나보실 수 있습니다. 우리는 커뮤니티로 부터 피드백을 받기 위해 0.1.0 프로토타입을 릴리즈 합니다. 한 가지 알아두실 점은 이 버전이 프로토타입 수준의 릴리즈이며 빨리 릴리즈 하고, 자주 릴리즈 하자라는 정신이 깔려 있다는 것 입니다. GitHub를 통해 피드백을 주세요.

    왜 도커를 포크(fork) 하지 않았죠?

보안에서 부터 컴포넌트 결합성(composability) 측면까지, 중심이 되는 하나의 데몬을 통해 모든 것이 실행된다는 도커의 프로세스 모델은 근본적으로 잘못되어(flawed) 있습니다. 이러한 도커의 결함을 수정하는 것은 본질적으로 프로젝트 전체를 재작성하는 것을 의미합니다. 기존의 구현이 가진 모든 짐더미들을 떠안으면서 말이죠.

    왜 지금 이 시점에 이런 일을 하는거죠?

기업 환경에서 CoreOS를 운영하는 규모가 크고 진지한 사용자들이 있습니다. 이러한 문제를 지적하지 않고서는 도커의 결함이 있는 보안 모델을 계속 지원할 수 있으리란 자신이 없었습니다. 또한 지난 몇 주 사이에, 도커는 기본적인 컨테이너 관리를 넘어 서는많은 부가 기능들을 추가하며 복잡한 플랫폼으로 변모하는 청사진을 보여 주었습니다. 우리의 주요 사용자들은 컨테이너를 적용하고자 하는 기존 플랫폼들을 가지고 있습니다. 이러한 플랫폼들을 단순히 안전하고 이식 가능한 컨테이너에 실행할 수 있는 방법만을 원하는 회사들을 위해 우리는 그 사이의 틈새를 매꾸어줄 방법이 필요합니다.

    Rocket이 우분투, RHEL, CentOS 등에서 실행될까요?

예. Rocket의 바이너리인 rkt는 CoreOS와는 별개로 존재하는 단일 도구이며 다양한 플랫폼에서 사용될 수 있습니다. 마음에 드는 기존 도구들이 없어서 만들었다는 측면에서 etcd 프로젝트와도 비슷할 수 있겠네요.

    Rocket과 앱 컨테이너(App Container)의 차이는 무엇인가요?

앱 컨테이너(App Container)는 컨테이너와 관련된 설비들의 스펙을 정의합니다. Rocket은 이러한 설비들을 CLI 도구로 구현하고 있습니다. 이러한 스펙은 오픈되어 있기 때문에, Rocket을 사용하지 않고도 다양한 시스템에서 앱 컨테이너를 직접 구현하여 사용할 수 있습니다. CoreOS는 Rocket 이외의 구현체를 완전히 지원하고 끌어 안을 수 있습니다.

    앱 컨테이너 지원이 도커 플랫폼에 기여할 수 있을까요?

물론입니다. 만약 앱 컨테이너 스펙이 도커 안에서 구현된다면 두 프로젝트는 상호호환되어 선언문에 있던 원래의 목표를 만족시킬 수 있을 것입니다. CoreOS에서는 앱 컨테이너가 충분히 성숙되었을 때 이 작업의 기여 여부를 평가해볼 예정입니다.

    CoreOS는 도컬를 계속 포함시킬 예정인가요?

그렇습니다. 저희는 CoreOS가 도커를 실행시키기에 가장 좋은 장소라는 사실을 계속 확인시킬 것입니다. 앞으로의 포스팅을 위해 자세한 내용을 아껴두겠지만, Rocket이 좀 더 개발되더라도 도커는 지금처럼 CoreOS와 완전히 통합되어 있을 것이라 생각하셔도 됩니다.

oreOS가 기존에 잘 만들어진 도커를 버리고 Rocket을 만든 가장 큰 이유가 바로 Standard Container에 대한 정의입니다.
처음 도커가 등장했을 때 표준 컨테이너 선언(Standard Container manifesto)으로 불리는 정의가 포함되어 있었는데요, 다음과 같습니다.

https://github.com/docker/docker/commit/0db56e6c519b19ec16c6fbd12e3cee7dfa6018c5

    STANDARD OPERATIONS
        컨테이너 쉬핑(shipping) 처럼 표준 컨테이너는 표준 동작을 정의해야 한다.
        started, stopped, copied, snapshotted, downloaded, uploaded, tagged
    CONTENT-AGNOSTIC
        표준 컨테이너는 content-agnostic 해야 한다. 즉, 그 내용과는 상관 없이 모든 표준 동작(operation)이 같은 효과를 내야 한다.
    INFRASTRUCTURE-AGNOSTIC
        컨테이너 타입은 infrastructure-agnostic 해야 한다. 즉, 컨테이너는 전세계의 수많은 기관에 전송될 수 있어야 하며 다양한 장비에서 다뤄질 수 있어야 한다.
        개인 서버에서 동작하던 것이 EC2 클러스터에서도 동작해야 한다는 것이다.
    DESIGNED FOR AUTOMATION
        표준 컨테이너는 내용과 인프라에 상관 없는 표준 operation을 제공하기 때문에 자동화에 아주 딱 잘 맞는다.
    INDUSTRIAL-GRADE DELIVERY
        현재 1700만여개의 컨테이너가 바다를 건너고 있으며 표준화된 방법으로 적재되고 이동한다.
        표준 컨테이너는 이와 같은 컨테이너 산업 수준의 소프트웨어 배포를 실현할 수 있다.

그런데 이 야심찬 선언문이 0.6.2 버전에서 사라졌다고 하네요.
https://github.com/docker/docker/commit/eed00a4afd1e8e8e35f8ca640c94d9c9e9babaf7
커밋 로그에는 너무 길어서 뺀다고만 되어 있습니다.

아무튼 CoreOS에서는 portability를 포기한 듯한 도커의 행보가 마음에 들지 않았던 것 같으며 보안을 빌미로 새로운 컨테이너 규약인 App Container와 프로토타입 구현체인 Rocket을 내놓았다고 밝힙니다.
